= Maid

Be lazy!  Let Maid clean up after you, based on rules you define.

Maid keeps files from sitting around too long, untouched.  Many of the downloads and other files you collect can easily be categorized and handled appropriately by rules you define.  Let the maid in your computer take care of the easy stuff, so you can spend more of your time on what matters.

Think of it like the email filters you might already have, but for files.  Worried about things happening that you don't expect?  Maid doesn't overwrite files and actions are logged so you can tell what happened.

Maid is inspired by the Mac OS X shareware program Hazel[http://www.noodlesoft.com/hazel.php].  This tool was created on Mac OS X 10.6, but should be generally portable to other systems.  (Some of the more advanced features such as <tt>downloaded_from</tt> require OS X, however.)

Your rules are defined in Ruby, so easy rules are easy and difficult rules are possible.

== Installation

Maid is currently in beta, but I encourage you to give it a try.  I'm using it on several computers daily.

If you have RubyGems installed (default on OS X and most Ruby installations):

    gem install maid --pre

If you want to install the executable for all users, you may need to give root access:

    sudo gem install maid --pre

Not needed on Mac OS X:  You might also need to add the RubyGems <tt>bin</tt> directory to your <tt>$PATH</tt>.  For example, on Ubuntu you might need to add something like this to your <tt>~/.bashrc</tt>:

    export PATH="/var/lib/gems/1.8/bin:$PATH"

== Tutorial

Maid rules are defined using Ruby, with some common operations made easier with a small DSL (Domain Specific Language).  Here's a sample:

  Maid.rules do
    rule 'Old files downloaded while developing/testing' do
      dir('~/Downloads/*').each do |path|
        if downloaded_from(path).any? {|u| u.match 'http://localhost'} && 1.week.since? last_accessed(path)
          trash(path)
        end
      end
    end
  end

Before you start running your rules, you'll likely want to be able to test them.  Here's how:

    # No actions are taken; you just see what would happen with your rules as defined.
    maid --dry-run
    maid --noop
    maid -n

To run your rules on demand, you can run <tt>maid</tt> manually:

    maid                    # Run the rules at ~/.maid/rules.rb, logging to ~/.maid/maid.log
    maid -r some_rules.rb   # Run the rules in the file 'some_rules.rb', logging to ~/.maid/maid.log

So, for example, if this is <tt>some_rules.rb</tt>:

    Maid.rules do
      rule 'downloaded PDF books' do
        dir('~/Downloads/*.pdf').each do |path|
          move(path, '~/Books')
        end
      end
    end

This is the command to test, as well as some sample output:

    $ maid -nr some_rules.rb
    Rule: downloaded PDF books
    mv "/Users/ben/Downloads/book.pdf" "/Users/ben/Books/"
    mv "/Users/ben/Downloads/issue12.pdf" "/Users/ben/Books/"
    mv "/Users/ben/Downloads/spring2011newsletter.pdf" "/Users/ben/Books/"

For more DSL helper methods, please see the documentation of Maid::Tools.

=== Automation

Once you get a hang for what you can do with Maid, let it do its stuff automatically throughout the day.  You'll find your computer stays a little tidier with as you teach it how to handle your common files.

To do this, edit your crontab in your tool of choice and have it invoke the <tt>maid</tt> command.  The <tt>--silent</tt> option is provided to keep this from emailing you, if desired.  A log of the actions taken is kept at <tt>~/.maid/maid.log</tt>.

Example for every day at 1am:

    # minute hour day_of_month month day_of_week command_to_execute
    0 1 * * * /bin/bash -li -c "maid --silent"

Both Mac OS X and Linux support callbacks when folders are changed, and that may be a forthcoming feature in Maid.  That said, I find cron to take care of most of my needs.

== Sample and Ideas

Here's a sampling from my <tt>~/.maid/rules.rb</tt> file to get you started:
  
  software_archive_path = '~/Reference/Software/'

  osx_app_extensions = %w[app dmg pkg wdgt]
  osx_app_patterns = osx_app_extensions.map { |ext| (/\.#{ext}\/$/) }
  linux_app_archive_path = "#{software_archive_path}/Linux/"
  osx_app_archive_path = "#{software_archive_path}/Mac OS X/"
  win_app_archive_path = "#{software_archive_path}/Windows XP/"

  Maid.rules do
    rule 'Files downloaded while developing' do
      dir('~/Downloads/*').select do |path|
        if downloaded_from(path).any? { |url| url.match(/^http:\/\/localhost:/) || url.match('staging.yourcompany.com') }
          trash(path)
        end
      end
    end

    rule 'MP3s likely to be music' do
      dir('~/Downloads/*.mp3').each do |path|
        if duration_s(path) > 30.0
          move(path, '~/Music/iTunes/iTunes Media/Automatically Add to iTunes/')
        end
      end
    end

    rule 'Accidentally downloaded HTML' do # this basically only happens to me on accident
      dir('~/Downloads/*.html').each do |path|
        trash(path)
      end
    end

    rule 'Linux ISOs, etc' do
      dir('~/Downloads/*.iso').each do |path|
        move(path, software_archive_path)
      end
    end

    rule 'Linux applications in Debian packages' do
      dir('~/Downloads/*.deb').each do |path|
        move(path, linux_app_archive_path)
      end
    end

    rule 'Mac OS X applications in disk images' do
      dir('~/Downloads/*.dmg').each do |path|
        move(path, osx_app_archive_path)
      end
    end

    rule 'Mac OS X applications in zip files' do
      dir('~/Downloads/*.zip').select do |path|
        candidates = zipfile_contents(path)
        candidates.any? { |c| osx_app_patterns.any? { |re| c.match(re) } }
      end.each do |path|
        move(path, osx_app_archive_path)
      end
    end

    rule 'Windows applications' do
      dir('~/Downloads/*.exe').each do |path|
        move(path, win_app_archive_path)
      end
    end

    rule 'Windows applications in zip files' do
      dir('~/Downloads/*.zip').select do |path|
        candidates = zipfile_contents(path)
        candidates.any? { |candidate| candidate.match(/\.exe$/) }
      end.each do |path|
        move(path, win_app_archive_path)
      end
    end

    rule 'Accidental Wikipedia downloads' do
      dir('~/Downloads/*').each do |path|
        if downloaded_from(path).any? { |url| url.match('wikipedia') }
          trash(path)
        end
      end
    end

    # If you store your working files in ~/Outbox/ (like Ethan Schoonover's "Kinkless Desktop"), you can have them automatically filed away...

    rule 'JS snippets I write' do
      dir('~/Outbox/*.js').each do |path|
        if 1.weeks.ago > File.atime(path)
          move(path, '~/Projects/snippets/javascript/')
        end
      end
    end
      
    rule 'Ruby snippets' do
      dir('~/Outbox/*.rb').each do |path|
        if 1.week.ago > File.atime(path)
          move(path, '~/Projects/snippets/ruby/')
        end
      end
    end

    rule 'Email drafts' do
      dir('~/Outbox/*.eml').each do |path|
        if 1.week.ago > File.atime(path)
          move(path, '~/Archive/Misc Drafts/')
        end
      end
    end
    
    rule 'Misc notes' do
      %w[md markdown rtf txt].inject([]) { |all, ext| all + dir("~/Outbox/*.#{ext}") }.each do |path|
        if 1.week.ago > File.atime(path)
          move(path, '~/Archive/Misc Notes/')
        end
      end
    end

    rule 'Misc Screenshots' do
      dir('~/Outbox/Screen shot *').each do |path|
        if 1.week.ago > File.atime(path)
          move(path, '~/Archive/Misc Screenshots/')
        end
      end
    end
     
    rule 'Clear my working "temp" directory' do
      trash('~/tmp')
      FileUtils.mkdir_p(File.expand_path('~/tmp'))
    end
  end

== Warranty

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

== License

GPLv2.  See LICENSE for a copy.
